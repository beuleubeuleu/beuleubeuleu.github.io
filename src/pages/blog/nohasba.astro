---
import ProjectLayout from "../../layouts/ProjectLayout.astro";
import heroImage     from "../../assets/projets/nohasba/nohasba-home.png"
import groupeImage   from "../../assets/projets/nohasba/nohasba-createGroup.png"
import expensesImage from "../../assets/projets/nohasba/nohasba-expenses.png"
import detteImage    from "../../assets/projets/nohasba/nohasba-dette.png"
import codeImage     from "../../assets/projets/nohasba/nohasba-getGroupTotalDebt.png"
import diagramSQL    from "../../assets/projets/nohasba/nohasba-sql-diagram.png"

import { Image }     from "astro:assets";
import AccordionItem from "../../components/shared/AccordionItem.astro";
import Accordion     from "../../components/shared/Accordion.astro";
---

<ProjectLayout titre="NoHasba"
               description="Article descriptif de mon projet fullstack 'NoHasba'"
               blogTitle="NoHasba: Persistence JSON, relationnelle, ou les deux..."
               src={ heroImage }
               alt="NoHasba, page d'accueil"
               techstack={ ["React", "MySQL"] }
               date="29 Septembre 2023"

>
    <ul class="links">
        <li>
            <a href="https://github.com/beuleubeuleu/no-hasba">Lien vers le repo github</a>
        </li>
        <li>
            <a href="/projets/nohasba#TLDR/">TLDR</a>
        </li>
    </ul>

    <p>
        NoHasba est un projet que j'ai développé pendant ma formation développeur web•web mobile sur mon temps libre. Le
        but était de découvrir par la pratique quelques technologies, concepts. <br>
        Avant ma première ligne de code, je voulais expérimenter avec une base de données relationnelle et l'inversion
        de dépendance. J'avais choisi de copier le métier de
        <a href="https://www.tricount.com/fr/" target="_blank">tricount</a>
        pour avoir un challenge en algorithme.
    </p>
    <h2>Demo</h2>
    <p>Mais enfaite, il sert à quoi le site?</p>
    <p>
        En l'état, il ne sert à rien. J'ai très peu travailler sur le front mais j'ai tout de même quelques screenshot
        pour vous.
    </p>
    <div class="gallery">
        <p>Créer un groupe</p>
        <Image width="2100"
               height="1350"
               src={ groupeImage }
               alt="page de création d'un groupe"
               format="webp"></Image>
        <p>Voir les dépenses du groupe</p>
        <Image width="2100"
               height="1350"
               src={ expensesImage }
               alt="page des dépenses"
               format="webp"></Image>
        <p>Comment régler les dettes du groupe</p>
        <Image width="2100"
               height="1350"
               src={ detteImage }
               alt="option 'comment régler' de la page des dépenses"
               format="webp"></Image>
    </div>
    <p>
        La création des dépenses et des utilisateurs d'un groupe se fait à l'aide de requêtes http (postman, insomnia,
        curl)
    </p>
    <h2>BDD Relationnelle</h2>
    <p>
        N'ayant utilisé que mongoDB avant le développement de NoHasba, j'ai fait beaucoup de veille avant de commencer.
        Comment choisir, ou comment m'y prendre pour initialisé ma base de données ? <br>
        Après quelques temps à regarder des vidéos et lire des articles j'ai décidé d'utilisé MySQL, car les besoins de
        mon
        applications étaient minime et la prise en main pour un premier projet m'a semblé plus facile. <br>
        Et interdiction d'utilisé un ORM pour écrire mes propres requête sql.
    </p>
    <p>
        J'avais déjà une base de données en JSON, je n'ai donc pas
        eu trop de mal à identifier mes tables.(plus de détails dans la partie "Inversion de Dépendance")
    </p>
    <p>
        La base de données est composée de plusieurs tables interconnectées, chacune jouant un rôle spécifique dans le
        système :
    </p>
    <ul>
        <li><span class="bold">Table "Groupes de Dépenses" :</span> Cette table stocke des informations sur les
                                                                    différents groupes de dépenses créés par les
                                                                    utilisateurs. Chaque groupe est identifié par un nom
                                                                    unique et peut avoir une description pour une
                                                                    meilleure compréhension de son objectif.
        </li>
        <li><span class="bold">Table "Utilisateurs" :</span> Cette table enregistre les profils des utilisateurs
                                                             impliqués dans les groupes de dépenses. Chaque utilisateur
                                                             est lié à un groupe spécifique, et son nom est enregistré
                                                             pour une identification aisée.
        </li>
        <li><span class="bold">Table "Dépenses" :</span> Les détails de chaque transaction financière sont stockés dans
                                                         cette table. Chaque dépense est associée à un groupe
                                                         particulier et enregistre son nom ainsi que le montant total.
        </li>
        <li><span class="bold">Tables "Contributeurs de Dépenses" et "Bénéficiaires de Dépenses" :</span> Ces tables
                                                                                                          gèrent les
                                                                                                          relations
                                                                                                          entre les
                                                                                                          utilisateurs
                                                                                                          et les
                                                                                                          dépenses. Les
                                                                                                          contributeurs
                                                                                                          de chaque
                                                                                                          dépense sont
                                                                                                          enregistrés,
                                                                                                          ainsi que les
                                                                                                          bénéficiaires
                                                                                                          qui ont
                                                                                                          profité de
                                                                                                          cette dépense.
        </li>
    </ul>
    <p>
        J'ai créé un fichier v0.sql dans un dossier migrations avec l'initialisation de mes tables. <br>
        Pour les mise à jour futures, plutôt que d'apporter des modifications directes à la base de données, les
        migrations SQL cme permettront,à travers des scripts SQL, de décrire les modifications à apporter, telles que
        l'ajout
        de nouvelles tables, la modification des colonnes existantes ou la création d'index. <br>
        Ces scripts sont ensuite exécutés séquentiellement pour mettre à jour la structure de la base de données. Les
        migrations SQL offrent une traçabilité complète des changements et permettent de <span
            style="font-style: italic">revenir en arrière en cas de problème</span>, garantissant ainsi la cohérence et
        l'intégrité des données tout au long du cycle de vie d'une application.
    </p>
    <Image width="1374"
           height="1188"
           src={ diagramSQL }
           alt="Diagrame de relation des entités de NoHasba"
           format="webp"
           class="diagram-image"></Image>

    <h2>L'Algorithme</h2>
    <Accordion>
        <AccordionItem header="Voir le code">
            <Image width="2048"
                   height="2868"
                   src={ codeImage }
                   alt="Code snippet de l'algorithme de résolution de dettes"
                   format="webp"
                   class="code-image"></Image>
        </AccordionItem>
    </Accordion>

    <p>
        Cette méthode qui appartient à la classe trigroupSQL a pour responsabilité de calculer les dettes total d'un
        groupe. L'algorithme utilise une fonction asynchrone pour intéragir avec la base de données MySQL et effectuer
        les calculs.
        On va décomposer chaque étapes clés et opérations de la méthode.
    </p>
    <ol>
        <li><span class="bold">Connexion à la BDD: </span>On commence par établir une connexion à la base de données
                                                          MySQL avec la configuration fournie dans la classe
                                                          d'origine.
        </li>
        <li><span class="bold">Récuperer les dépenses: </span>La méthode va ensuite chercher dans la base de donnée
                                                              toutes les dépenses
                                                              associées au groupe spécifié dans la requête.
        </li>
        <li><span class="bold">Calculé la dette: </span>Pour chaque dépense, on récupère le contributeur et les
                                                        bénéficiaires, et on calcule le montant dû de chaque
                                                        bénéficiaire au contributeur. l'information est stocké dans un
                                                        tableau <code>debts</code>.
        </li>
        <li><span class="bold">Aplatir le tableau de dette: </span>Le tableau <code>debts</code> qui était initialement
                                                                   un tableau de tableau, est aplati avec la methode
            <code>.flat()</code> pour en faire un tableau d'objets.
        </li>
        <li><span class="bold">Déclaration de <code>userDebt</code>: </span>L'objet userDebts est créé pour stocket la
                                                                            dette de chaque utilisateur. Le tableau de
                                                                            dettes est itéré et la dette total de chaque
                                                                            utilisateur est calculé et mise à jour dans
                                                                            l'objet.
            <code>userDebts</code></li>
        <li><span class="bold">Conversion de <code>userDebts</code> en un tableau: </span>L'objet <code>userDebts</code>
                                                                                          va être converti en un tableau
                                                                                          d'objet <code>userList</code>,
                                                                                          où chaque objet contient
                                                                                          l'utilisateur et l'information
                                                                                          sur sa dette respective.
        </li>
        <li><span class="bold">Calculer les paiements: </span>L'algorithme calcule une liste de paiement entre
                                                              utilisateurs. Il itère le tableau <code>userList</code> et
                                                              identifie des paires d'utilisateurs ou l'un doit de
                                                              l'argent <code>user1.debt > 0</code> et où l'autre est dû
            <code>user2.debt < 0</code>. Le montant qui peut être transférer entre eux est calculé et les dettes sont
                                                              mises à jour.
        </li>
        <li><span class="bold">Résulats: </span> La méthode retourne un objet qui contient 2 propriétés:
            <code>userDebt</code> qui est une liste trié des utilisateurs et de leurs dette, et
            <code>howToBalance</code> qui est une liste de paiements à faire entre utilisateurs pour annuler les dettes
        </li>
        <li><span class="bold">Erreur et Cleanup: </span>Chaque erreur qui survient pendant les opérations est attrapé
                                                         et affiché sur la console, et pour finir la connexion a la bdd
                                                         est coupé dans le bloc <code>finally</code></li>
    </ol>
    <p>
        Cette section a offert un aperçu détaillé de la méthode de calcul des dettes totales d'un groupe, une composante
        essentielle de mon projet. Au cours de cette exploration, nous avons plongé dans les rouages de
        l'algorithme, mettant en lumière chacune de ses étapes clés et opérations.
    </p>

    <h2>Inversion de Dépendance</h2>
    <p>
        Au début de mon parcours de développement pour NoHasba, j'ai opté pour une solution simple mais limitée: stocker
        les données dans un fichier JSON et les manipuler en utilisant Node.js File System. Cela a permis un démarrage
        rapide du projet, mais rapidement, il est devenu évident que cette approche n'était pas évolutive ni maintenable
        à long terme.
    </p>
    <p>
        Pour résoudre ces limitations, j'ai entrepris une refonte majeure de l'infrastructure de gestion des données en
        introduisant des concepts d'inversion de dépendance et de modularité. Voici comment cette transition s'est
        déroulée:
    </p>
    <ul>
        <li><span class="bold">Conception de l'Interface Trigroup:</span> La première étape a consisté à créer une
                                                                          interface appelée "Trigroup". Cette interface
                                                                          a défini un ensemble de méthodes et de
                                                                          propriétés que toute classe de gestion de
                                                                          groupe de dépenses devrait implémenter. Cette
                                                                          abstraction a permis de définir un contrat
                                                                          clair pour la manipulation des données de
                                                                          groupe de dépenses.
        </li>
        <li><span class="bold">Implémentation de TrigroupJson et TrigroupSql:</span> En utilisant l'interface "Trigroup"
                                                                                     comme base, j'ai développé deux
                                                                                     classes distinctes : "TrigroupJson"
                                                                                     et "TrigroupSql". "TrigroupJson"
                                                                                     est conçu pour gérer les données
                                                                                     stockées dans des fichiers JSON,
                                                                                     tandis que "TrigroupSql" est
                                                                                     destiné à interagir avec une base
                                                                                     de données SQL, offrant une
                                                                                     flexibilité accrue pour le stockage
                                                                                     des données.
        </li>
        <li><span class="bold">Mise en Place d'une Fabrique Abstraite:</span> Une étape cruciale de cette transition a
                                                                              été la création d'une fabrique abstraite.
                                                                              Cette fabrique utilise une variable
                                                                              d'environnement pour déterminer quel type
                                                                              de gestionnaire de groupe de dépenses
                                                                              ("TrigroupJson" ou "TrigroupSql") doit
                                                                              être instancié. Cela a permis de rendre le
                                                                              choix du stockage des données flexible et
                                                                              adaptable en fonction des besoins du
                                                                              projet ou des préférences.
        </li>
    </ul>

    <p>
        Ce changement d'approche a considérablement amélioré la maintenabilité de l'application et a ouvert la porte à
        des évolutions futures sans perturber le fonctionnement de base. En adoptant des principes d'inversion de
        dépendance et en créant une structure modulaire, NoHasba est devenu plus extensible, ce qui facilitera
        l'ajout de nouvelles fonctionnalités et le passage à d'autres systèmes de stockage de données si nécessaire.
    </p>
    <p>
        Cette transition a également renforcé la qualité du code en séparant clairement les responsabilités et en
        permettant une meilleure gestion des erreurs, tout en préservant la cohérence et la stabilité du projet.
    </p>
    <h2 id="TLDR">Too Long Didn't Read</h2>
    <p>
        NoHasba est un projet personnel développé pendant ma formation en développement web et mobile. Il a été
        l'occasion d'explorer diverses technologies, notamment une base de données relationnelle et l'inversion de
        dépendance. L'application permet de gérer des groupes de dépenses, même si elle n'est pas abouti sur le plan de
        l'interface utilisateur.
    </p>
    <p>
        J'ai introduit l'inversion de dépendance en utilisant une interface "Trigroup" avec des implémentations
        spécifiques pour le stockage en JSON ou en SQL, offrant une flexibilité accrue et une modularité au projet. Cela
        a permis d'améliorer la maintenabilité et la qualité du code tout en préparant le terrain pour de futures
        évolutions.
    </p>
    <p>
        j'ai choisi MySQL pour la base de données, ce qui a nécessité de créer des tables interconnectées pour stocker
        les informations sur les groupes, les utilisateurs et les dépenses. J'ai également mis en place des migrations
        SQL pour gérer les évolutions de la structure de la base de données. <br>
        Enfin, une partie essentielle du projet est l'algorithme de calcul des dettes entre les membres d'un groupe,
        expliqué en détail.
    </p>
</ProjectLayout>

<style>
  p, ul, ol {
    margin    : auto auto 1em;
    max-width : 800px;
  }

  h2 {
    text-align : center;
    margin     : 2em auto 1em;
  }

  .gallery {
    margin          : 1em auto;
    display         : flex;
    flex-direction  : column;
    justify-content : center;
    align-items     : flex-start;
    gap             : 1em;
  }

  .gallery img {
    object-fit      : cover;
    object-position : top left;
    width           : 1196px;
    height          : auto;
    max-height      : 500px;
  }

  .gallery p {
    margin     : 1em 0 0;
    font-style : italic;
  }

  .code-image {
    width  : 100%;
    height : auto;
  }

  .diagram-image {
    width  : min(600px, 100%);
    height : auto;
    margin : auto;
  }

  #TLDR {
    position   : relative;
    margin-top : 60px;
  }

  #TLDR::before {
    content : "";
    display : block;
    height  : 60px;
  }

  code {
    background    : #DDD;
    border-radius : 3px;
  }
</style>